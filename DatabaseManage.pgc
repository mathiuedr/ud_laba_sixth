#include <stdio.h>
#include <string.h>
#include <pgtypes_date.h>
#include <time.h>
#include <stdlib.h>

int validate_date_format(const char *date) {
    struct tm tm;
    memset(&tm, 0, sizeof(struct tm));
    if (strptime(date, "%Y-%m-%d", &tm)) {
        return 1;
    }
    return 0;
}

int validate_cortege(const char *isbn, const char *book_name, const char *description, const char *publication_date, const char *author_name) {
    if (strlen(isbn) != 13) {
        printf("Error: ISBN must have exactly 13 characters.\n");
        return 0;
    }
    if (strlen(book_name) > 255) {
        printf("Error: Book name must be no more than 255 characters.\n");
        return 0;
    }
    if (!validate_date_format(publication_date)) {
        printf("Error: Publication date must be in the format 'yyyy-MM-dd'.\n");
        return 0;
    }
    if (strlen(author_name) > 255) {
        printf("Error: Author name must be no more than 255 characters.\n");
        return 0;
    }
    return 1;
}

int connect_to_db(const char *username, const char *password) {
    exec sql begin declare section;
        const char *conn_str = "library";
        const char *user = username;
        const char *pass = password;
    exec sql end declare section;

    exec sql whenever sqlerror goto error_handler;

    exec sql connect to :conn_str user :user using :pass;
    printf("Connected to the database.\n");
    return 0;

error_handler:
    return -1;
}

int disconnect_from_db(){
    exec sql whenever sqlerror goto error_handler;
    exec sql disconnect;
    printf("Disconnected from the database.\n");
    return 0;
    error_handler:
        return -1;
}

int create_db() {
    exec sql whenever sqlerror goto error_handler;
    exec sql call create_db();
    exec sql commit;
    printf("Database created successfully.\n");
    return 0;

error_handler:
    exec sql rollback;
    return -1;
}

int drop_db() {
    exec sql whenever sqlerror goto error_handler;
    exec sql call drop_db();
    exec sql commit;
    printf("Database dropped successfully.\n");
    return 0;

error_handler:
    exec sql rollback;
    return -1;
}

int clear_db() {
    exec sql whenever sqlerror goto error_handler;
    exec sql call clear_table();
    exec sql commit;
    printf("Tables cleared successfully.\n");
    return 0;

error_handler:
    exec sql rollback;
    return -1;
}

int insert_book(const char *isbn_inp, const char *book_name_inp, const char *description_inp, const char *publication_date, const char *author_name_inp) {
    if (!validate_cortege(isbn_inp, book_name_inp, description_inp, publication_date, author_name_inp)) {
        return 1;
    }

    exec sql begin declare section;
        char isbn[14];
        char book_name[256];
        char description[4096];
        date pub_date;
        char author_name[256];
    exec sql end declare section;

    strncpy(isbn, isbn_inp, sizeof(isbn) - 1);
    isbn[sizeof(isbn) - 1] = '\0';
    strncpy(book_name, book_name_inp, sizeof(book_name) - 1);
    book_name[sizeof(book_name) - 1] = '\0';
    strncpy(description, description_inp, sizeof(description) - 1);
    description[sizeof(description) - 1] = '\0';
    strncpy(author_name, author_name_inp, sizeof(author_name) - 1);
    author_name[sizeof(author_name) - 1] = '\0';

    pub_date = PGTYPESdate_from_asc((char *)publication_date, NULL);

    exec sql whenever sqlerror goto error_handler;

    exec sql call insert_book(:isbn, :book_name, :description, :pub_date, :author_name);
    exec sql commit;

    printf("Book inserted successfully.\n");
    return 0;

error_handler:
    printf("Error inserting book: SQLCODE=%d, SQLERRM=%s\n", sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc);
    exec sql rollback;
    return -1;
}

char* search_books_by_author_name(const char *author_name) {
    if (strlen(author_name) > 255) {
        return NULL;
    }

    exec sql begin declare section;
        char author[256];
        int book_id;
        char isbn[14];
        char book_name[256];
        char description[4096];
        date pub_date;
        char goida[256];
    exec sql end declare section;

    strncpy(author, author_name, sizeof(author) - 1);
    author[sizeof(author) - 1] = '\0';

    char *result = (char *)malloc(1);
    if (!result) {
        fprintf(stderr, "Memory allocation failed.\n");
        return NULL;
    }
    result[0] = '\0';

    exec sql whenever sqlerror goto error_handler;

    exec sql declare book_cursor cursor for
        SELECT * FROM search_books_by_author_name(:author);

    exec sql open book_cursor;

    while (1) {
        exec sql fetch book_cursor into :book_id, :isbn, :book_name, :description, :pub_date, :goida;
        if (sqlca.sqlcode == 100) break;
        if (sqlca.sqlcode != 0) goto error_handler;

        char book_info[512];
        snprintf(book_info, sizeof(book_info), "ID: %d, ISBN: %s, Name: %s, Description: %s, Date: %s\n",
                 book_id, isbn, book_name, description, PGTYPESdate_to_asc(pub_date));

        size_t new_length = strlen(result) + strlen(book_info) + 1;
        result = (char *)realloc(result, new_length);
        if (!result) {
            fprintf(stderr, "Memory reallocation failed.\n");
            return NULL;
        }
        strcat(result, book_info);
    }

    exec sql close book_cursor;

    return result;

error_handler:
    printf("Error searching books: SQLCODE=%d, SQLERRM=%s\n", sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc);
    free(result);
    return NULL;
}

int update_book_by_id(int book_id, const char *isbn_inp, const char *book_name_inp, const char *description_inp, const char *publication_date, const char *author_name_inp) {
    if(book_id < 0) return 1;
    if (!validate_cortege(isbn_inp, book_name_inp, description_inp, publication_date, author_name_inp)) {
        return 1;
    }

    exec sql begin declare section;
    int id = book_id;
    char isbn[14];
    char book_name[256];
    char description[4096];
    date pub_date;
    char author_name[256];
    char pub_date_str[256];
    exec sql end declare section;

    strncpy(isbn, isbn_inp, sizeof(isbn) - 1);
    isbn[sizeof(isbn) - 1] = '\0';
    strncpy(book_name, book_name_inp, sizeof(book_name) - 1);
    book_name[sizeof(book_name) - 1] = '\0';
    strncpy(description, description_inp, sizeof(description) - 1);
    description[sizeof(description) - 1] = '\0';
    strncpy(author_name, author_name_inp, sizeof(author_name) - 1);
    author_name[sizeof(author_name) - 1] = '\0';

    strncpy(pub_date_str, publication_date, sizeof(pub_date_str) - 1);
    pub_date_str[sizeof(pub_date_str) - 1] = '\0';
    pub_date = PGTYPESdate_from_asc(pub_date_str, NULL);

    exec sql whenever sqlerror goto error_handler;

    exec sql call update_book(:id, :isbn, :book_name, :description, :pub_date, :author_name);
    exec sql commit;

    printf("Book updated successfully.\n");
    return 0;

error_handler:
    exec sql rollback;
    printf("Error updating book: SQLCODE=%ld, SQLERRM=%s\n", (long)sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc);
    return -1;
}

int delete_book_by_name(const char *book_name) {
    if(strlen(book_name)>255) return 1;
    exec sql begin declare section;
        char name[256];
    exec sql end declare section;

    strncpy(name, book_name, sizeof(name) - 1);

    exec sql whenever sqlerror goto error_handler;

    exec sql call delete_book_by_name(:name);
    exec sql commit;
    printf("Book deleted successfully.\n");
    return 0;

error_handler:
    exec sql rollback;
    return -1;
}

void grant_user_on_procedure(const char *procedure_name, const char *username) {
    exec sql begin declare section;
        char proc_name[256];
        char user[256];
    exec sql end declare section;

    strncpy(proc_name, procedure_name, sizeof(proc_name) - 1);
    proc_name[sizeof(proc_name) - 1] = '\0';
    strncpy(user, username, sizeof(user) - 1);
    user[sizeof(user) - 1] = '\0';

    exec sql whenever sqlerror goto error_handler;

    exec sql call grant_user_on_procedure(:proc_name, :user);
    exec sql commit;
    printf("Procedure '%s' granted to user '%s' successfully.\n", proc_name, user);
    return;

error_handler:
    exec sql rollback;
    printf("Error granting procedure: SQLCODE=%d, SQLERRM=%s\n", sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc);
}

void grant_user_on_function(const char *procedure_name, const char *username) {
    exec sql begin declare section;
        char proc_name[256];
        char user[256];
    exec sql end declare section;

    strncpy(proc_name, procedure_name, sizeof(proc_name) - 1);
    proc_name[sizeof(proc_name) - 1] = '\0';
    strncpy(user, username, sizeof(user) - 1);
    user[sizeof(user) - 1] = '\0';

    exec sql whenever sqlerror goto error_handler;

    exec sql call grant_user_on_function(:proc_name, :user);
    exec sql commit;
    printf("Procedure '%s' granted to user '%s' successfully.\n", proc_name, user);

    return;

error_handler:
    exec sql rollback;
    printf("Error granting procedure: SQLCODE=%d, SQLERRM=%s\n", sqlca.sqlcode, sqlca.sqlerrm.sqlerrmc);
}

int create_user(const char* login,const char* password, bool create_db_right, bool delete_db_right,bool clear_db_right,
bool insert_right, bool search_right, bool update_right, bool delete_right, bool create_user_right){
    exec sql whenever sqlerror goto error_handler;
    exec sql begin declare section;
        char name[256];
        char user_password[256];
    exec sql end declare section;
        strncpy(name, login, sizeof(name) - 1);
        name[sizeof(name) - 1] = '\0';
        strncpy(user_password, password, sizeof(user_password) - 1);
        user_password[sizeof(user_password) - 1] = '\0';
    exec sql call create_user(:name, :user_password);
    exec sql commit;
    if(create_db_right){
        grant_user_on_procedure("create_db", login);
    }
    if(delete_db_right){
        grant_user_on_procedure("drop_db", login);
    }
    if(clear_db_right){
        grant_user_on_procedure("clear_table", login);
    }
    if(insert_right){
        grant_user_on_procedure("insert_book", login);
    }
    if(search_right){
        grant_user_on_procedure("search_books_by_author_name", login);
    }
    if(update_right){
        grant_user_on_procedure("update_book", login);
    }
    if(delete_right){
        grant_user_on_procedure("delete_book_by_name", login);
    }
    if(create_user_right){
        grant_user_on_procedure("create_user", login);
        grant_user_on_procedure("grant_user_on_function", login);
        grant_user_on_procedure("grant_user_on_procedure", login);
    }
    return 0;
    error_handler:
    exec sql rollback;
        return -1;
}
